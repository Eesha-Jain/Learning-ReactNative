import React, { Component } from 'react';

export class Todo extends Component {
  constructor() {
    super();
    this.state = {
      todos: [],
      newTodo: ''
    }

    //this.handleChange = this.handleChange.bind(this)
  }

  handleChange(e) {
    const {value} = e.target;
    this.setState({newTodo: value});
  }

  handleClick(e) {
    e.preventDefault();
    const todos = [...this.state.todos, this.state.newTodo]; //Instead of this.state.newTodo, put this.input.value (because of the ref put in the <input>)
    //Then you would have to reset refs here
    this.setState({todos, newTodo: ''});
  }

  removeTodo(i) {
    const todos = [...this.state.todos.slice(0, i), ...this.state.todos.slice(i + 1)];
    this.setState({todos});
  }

  render() {
    //With ref, you can remove onchange
    return (
      <div>
        <form>
          <input ref={node => this.input = node} onChange={this.handleChange.bind(this)} value={this.state.newTodo} type="text" placeholder="new to-do item"/>
          <button onClick={this.handleClick.bind(this)}>Create</button>
        </form>

        <ul>
        {this.state.todos.map((todo, i) =>
          <li onClick={() => this.removeTodo.call(this, i)}>{todo}</li>
        )}
        </ul>
      </div>
    );
  }
}
